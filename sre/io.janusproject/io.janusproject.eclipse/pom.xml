<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>io.janusproject.sre</groupId>
		<artifactId>io.janusproject</artifactId>
		<version>0.13.0-SNAPSHOT</version>
	</parent>

	<artifactId>io.janusproject.eclipse</artifactId>
	<packaging>eclipse-plugin</packaging>
	<name>Eclipse Integration for Janus</name>
	<inceptionYear>2014</inceptionYear>

	<build>
		<plugins>
 			<plugin>
 				<groupId>org.eclipse.tycho</groupId>
 				<artifactId>tycho-source-plugin</artifactId>
 			</plugin>

			<!-- FIXME: This extra classpath element is defined for fixing a bug into the Maven's Tycho compiler
				 that avoids to load the SWT bundle fragment into the classpath. It causes a class not found
				 exception for a SWT widget. -->
			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>tycho-compiler-plugin</artifactId>
				<version>${tycho.version}</version>
				<configuration>
					<extraClasspathElements>
						<extraClasspathElement>
							<groupId>org.eclipse.platform</groupId>
							<artifactId>org.eclipse.swt.gtk.linux.x86_64</artifactId>
							<version>${swt.version}</version>
						</extraClasspathElement>
					</extraClasspathElements>
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.google.code.maven-replacer-plugin</groupId>
				<artifactId>replacer</artifactId>
				<executions>
					<execution>
						<id>prepare-eclipse-aboutbox</id>
						<phase>process-resources</phase>
						<goals>
							<goal>replace</goal>
						</goals>
						<configuration>
							<encoding>${project.build.sourceEncoding}</encoding>
							<file>${project.basedir}/about.mappings</file>
							<regexFlags><regexFlag>MULTILINE</regexFlag></regexFlags>
							<replacements>
								<replacement>
									<token>^(0 *= *)(.*)$</token>
									<value>$1${sarl.buildId}</value>
								</replacement>
								<replacement>
									<token>^(1 *= *)(.*)$</token>
									<value>$1${project.inceptionYear}-${year}</value>
								</replacement>
								<replacement>
									<token>^(2 *= *)(.*)$</token>
									<value>$1${copyrighters}</value>
								</replacement>
								<replacement>
									<token>^(3 *= *)(.*)$</token>
									<value>$1${sarlUrl}</value>
								</replacement>
							</replacements>
						</configuration>
					</execution>
					<execution>
						<id>prepare-eclipse-buildproperties</id>
						<phase>process-resources</phase>
						<goals>
							<goal>replace</goal>
						</goals>
						<configuration>
							<encoding>${project.build.sourceEncoding}</encoding>
							<file>${project.basedir}/build.properties</file>
							<regexFlags><regexFlag>MULTILINE</regexFlag></regexFlags>
							<replacements>
								<replacement>
									<token>^(jre\.compilation\.profile *= *)(.*)$</token>
									<value>$1${sarl-dsl.min.jre.environment}</value>
								</replacement>
							</replacements>
						</configuration>
					</execution>
					<execution>
						<id>prepare-eclipse-manifestmf</id>
						<phase>process-resources</phase>
						<goals>
							<goal>replace</goal>
						</goals>
						<configuration>
							<encoding>${project.build.sourceEncoding}</encoding>
							<file>${project.basedir}/META-INF/MANIFEST.MF</file>
							<regexFlags><regexFlag>MULTILINE</regexFlag></regexFlags>
							<replacements>
								<replacement>
									<token>^(Bundle-RequiredExecutionEnvironment: *)(.*)$</token>
									<value>$1${sarl-run.min.jre.environment}</value>
								</replacement>
							</replacements>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<configuration>
					<sourceDirectories>
						<sourceDirectory>src</sourceDirectory>
					</sourceDirectories>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.codehaus.gmavenplus</groupId>
				<artifactId>gmavenplus-plugin</artifactId>
				<executions>
					<execution>
						<id>generate-janus-eclipse-dependency-list</id>
						<phase>compile</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<scripts>
								<script><![CDATA[
								import java.nio.file.Paths
								import java.util.jar.Manifest
								import java.io.FileInputStream
								
								janusBundle = "io.janusproject.plugin"
								coreProjectFolder = Paths.get(project.basedir.absolutePath, "..", janusBundle).toFile()
								sourceManifest = Paths.get(coreProjectFolder.absolutePath, "META-INF", "MANIFEST.MF").toFile()						
								manifest = new Manifest(new FileInputStream(sourceManifest))
								list = manifest.mainAttributes.getValue("Require-Bundle")
								deps = new ArrayList()
								deps.add(janusBundle)
								for (String dep : list.split("[ \\n\\r]*,[ \\n\\r]*")) {
									depName = dep.split("[ \\n\\r]*;[ \\n\\r]*")[0]
									deps.add(depName)
								}
		
								janusNetworkBundle = "io.janusproject.network"
								networkProjectFolder = Paths.get(project.basedir.absolutePath, "..", janusNetworkBundle).toFile()
								sourceManifest = Paths.get(networkProjectFolder.absolutePath, "META-INF", "MANIFEST.MF").toFile()						
								manifest = new Manifest(new FileInputStream(sourceManifest))
								list = manifest.mainAttributes.getValue("Require-Bundle")
								networkDeps = new ArrayList()
								networkDeps.add(janusNetworkBundle)
								for (String dep : list.split("[ \\n\\r]*,[ \\n\\r]*")) {
									depName = dep.split("[ \\n\\r]*;[ \\n\\r]*")[0]
									if (!deps.contains(depName)) {
										networkDeps.add(depName)
									}
								}

								sourceManifest = Paths.get(project.basedir.absolutePath, "META-INF", "MANIFEST.MF").toFile()						
								manifest = new Manifest(new FileInputStream(sourceManifest))
								list = manifest.mainAttributes.getValue("Require-Bundle")
								eclDeps = new ArrayList()
								for (String dep : list.split("[ \\n\\r]*,[ \\n\\r]*")) {
									depName = dep.split("[ \\n\\r]*;[ \\n\\r]*")[0]
									if (!deps.contains(depName) && !networkDeps.contains(depName)) {
										eclDeps.add(depName)
									}
								}
		
								listFile = Paths.get(project.basedir.absolutePath, "src", "io", "sarl", "sre", "eclipse", "buildpath", "janus-bundles.properties").toFile()
								output = new FileWriter(listFile)
								output.write("# This file is automatically generated by Maven. Please do not edit manually.\n")
								output.write("JANUS_MAIN_BUNDLE = ")
								output.write(janusBundle)
								output.write("\n")
								output.write("JANUS_BUNDLES = ")
								first = true
								for (String dep : deps) {
									if (first) {
										first = false
									} else {
										output.write(", ")
									}
									output.write(dep)
								}
								output.write("\nJANUS_ECLIPSE_BUNDLES = ")
								first = true
								for (String dep : eclDeps) {
									if (first) {
										first = false
									} else {
										output.write(", ")
									}
									output.write(dep)
								}
								output.write("\n")
								output.close()

								listFile = Paths.get(project.basedir.absolutePath, "src", "io", "sarl", "sre", "eclipse", "network", "janus-network-bundles.properties").toFile()
								output = new FileWriter(listFile)
								output.write("# This file is automatically generated by Maven. Please do not edit manually.\n")
								output.write("JANUS_NETWORK_BUNDLES = ")
								first = true
								for (String dep : networkDeps) {
									if (first) {
										first = false
									} else {
										output.write(", ")
									}
									output.write(dep)
								}
								output.write("\n")
								output.close()
								]]></script>
							</scripts>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<!-- ======================================= -->
	<!-- ==== Release Management === -->
	<!-- ======================================= -->
	<profiles>
		<profile>
			<id>maven-release-of-janus-sre</id>
			<activation>
				<property>
					<name>publicSarlApiModuleSet</name>
					<value>true</value>
				</property>
			</activation>
		</profile>
	</profiles>

</project>
